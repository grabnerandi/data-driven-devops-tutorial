{"version":"5","defaultTimeframe":{"from":"now-2h","to":"now","details":{"from":{"type":"expression","normalized":"now-2h","date":"2023-10-24T08:04:59.935Z"},"to":{"type":"expression","normalized":"now","date":"2023-10-24T10:04:59.936Z"}}},"sections":[{"id":"e78590ad-8561-46dd-a460-e6aab5d6516e","type":"markdown","markdown":"# Data Driven DevOps Hands On for Logs: Ingest, Analyze, Automate\n**START BY CREATING A COPY OF THIS NOTEBOOK OR EXPORT & IMPORT TO YOUR OWN DYNATRACE TENANT**\n\n**Got feedback or questions?**: [devrel@dynatrace.com](mailto:devrel@dynatrace.com?subject=DataDrivenDevOps%20Logs%20HandsOn)\n\nThis is the companion notebook for the Logs Hands-On Workshop. \nYou will learn about how to \n- INGEST logs into Dynatrace\n- ANALYZE them using DQL \n- AUTOMATE using Dynatrace Workflows\n\n[Click here to learn more about Dynatrace Log Management and Analytics capabilities](https://www.dynatrace.com/support/help/observe-and-explore/logs/log-management-and-analytics)\n\n![](https://github.com/dynatrace-perfclinics/data-driven-devops-tutorial/raw/main/images/log-hands-on-overview.png)"},{"id":"dac14fb8-419e-4366-81ed-e17b8266b865","type":"markdown","markdown":"## Step 1: INGEST Logs from within Dynatrace using JavaScript\nWithin the Dynatrace Platform we can execute JavaScript in the context of our current user. This also allows us to call any Dynatrace API through the Dynatrace SDKs.\n\nIn this first hands-on the code below will create two log entries every time it gets executed. It should showcase how easy it is to ingest LOGS by simply using the Dynatrace Ingest API. \nWe will later see how we can ingest the same logs using e.g: OpenTelemetry Logs or by using the OneAgent's automatic log ingest\n\n### Log Pattern we use\nWhile it should be easy to spot from the examples below - the log lines we are ingesting have the following pattern:\n`TYPE CURRENCY AMOUNT USERID`\n\n### Sample Log Lines\n```\n{\n  'content': 'Deposit EUR 352 abcdef-12345-xxxxxxx',\n  'user': 'John Doe',\n  'log.source': '/var/log/workshop.log',\n  'log.level' : \"INFO\",\n  'log.tag': ['tag1', 'tag2']\n},\n{\n  'content': 'Withdraw EUR 857 abcdef-12345-xxxxxxx',\n  'user': 'John Doe',\n  'log.source': '/var/log/workshop.log',\n  'log.level' : \"INFO\",\n  'log.tag': ['tag1', 'tag2']\n}\n```"},{"id":"c18414da-1b6c-4dd0-a0a7-886da95939d9","type":"markdown","markdown":"### Hands-On 1.1: Execute the JavaScript Tile to generate log entries\nIn the following Code tile you can\n* Click on \"Show Code\" to see the full JavaScript code\n* Click on \"Run Code\" to run it!"},{"id":"9ad012dd-344a-4cba-a485-b42298ebef63","type":"function","showTitle":false,"state":{"input":{"value":"/*\n* This function will run in the DYNATRACE JavaScript runtime.\n* For information visit https://dt-url.net/functions-help\n*/\nimport { logsClient } from '@dynatrace-sdk/client-classic-environment-v2';\nimport { metadataClient } from '@dynatrace-sdk/client-metadata';\n\nfunction getRandomInt(max) {\n  return Math.floor(Math.random() * max);\n}\n\nasync function getCurrentUser() {\n  return fetch('/platform/metadata/v1/user').then(res=>res.json())\n}\n\nconst currency = \"EUR\" // feel free to change this to USD or any other currency symbol\n\n/**\n * If you run this function it will create two log entries based on the format in const logs\n */\nexport default async function () {  \n  var userObject = await getCurrentUser()\n\n  var logs = [\n  {\n    'content': 'Deposit ' + currency + ' ' + getRandomInt(1000) + ' ' + userObject.userId,\n    'user': userObject.userName,\n    'log.source': '/var/log/workshop.log',\n    'log.level' : \"INFO\",\n    'log.tag': ['tag1', 'tag2'],\n  },\n  {\n    'content': 'Withdraw ' + currency + ' ' + getRandomInt(1000) + ' ' + userObject.userId,\n    'user': userObject.userName,\n    'log.source': '/var/log/workshop.log',\n    'log.level' : \"INFO\",\n    'log.tag': ['tag1', 'tag2'],\n  }\n];\n  \n  logsClient.storeLog({\n    body: logs,\n    type: 'application/json; charset=utf-8',\n  })\n  .then((response) => console.info(\"Successfully added \" + logs.length + \" log entries!\"))\n  .catch((e) => console.error(\"Error: \" + e));\n\n  return \"Created Log entries for user: \" + userObject.userName + \"(\" + userObject.userId + \")\"\n}","timeframe":{"from":"now-2h","to":"now"}},"state":"success","davis":{"includeLogs":true,"isDavisVisualizationAvailable":true},"visualizationSettings":{"thresholds":[],"chartSettings":{"gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"absolute"},"categoryOverrides":{}},"singleValue":{"label":"","prefixIcon":"","autoscale":true,"alignment":"center"},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"firstVisibleRowIndex":0,"columnWidths":{}}},"result":{"code":200,"value":"Created Log entries for user: Andreas Grabner(e53e640c-e612-4e02-b3b9-1d3bae05cc11)","notifications":[],"logs":"Successfully added 2 log entries!\n","dateTime":"2023-10-25T08:55:33.129Z","input":{"value":"/*\n* This function will run in the DYNATRACE JavaScript runtime.\n* For information visit https://dt-url.net/functions-help\n*/\nimport { logsClient } from '@dynatrace-sdk/client-classic-environment-v2';\nimport { metadataClient } from '@dynatrace-sdk/client-metadata';\n\nfunction getRandomInt(max) {\n  return Math.floor(Math.random() * max);\n}\n\nasync function getCurrentUser() {\n  return fetch('/platform/metadata/v1/user').then(res=>res.json())\n}\n\nconst currency = \"EUR\" // feel free to change this to USD or any other currency symbol\n\n/**\n * If you run this function it will create two log entries based on the format in const logs\n */\nexport default async function () {  \n  var userObject = await getCurrentUser()\n\n  var logs = [\n  {\n    'content': 'Deposit ' + currency + ' ' + getRandomInt(1000) + ' ' + userObject.userId,\n    'user': userObject.userName,\n    'log.source': '/var/log/workshop.log',\n    'log.level' : \"INFO\",\n    'log.tag': ['tag1', 'tag2'],\n  },\n  {\n    'content': 'Withdraw ' + currency + ' ' + getRandomInt(1000) + ' ' + userObject.userId,\n    'user': userObject.userName,\n    'log.source': '/var/log/workshop.log',\n    'log.level' : \"INFO\",\n    'log.tag': ['tag1', 'tag2'],\n  }\n];\n  \n  logsClient.storeLog({\n    body: logs,\n    type: 'application/json; charset=utf-8',\n  })\n  .then((response) => console.info(\"Successfully added \" + logs.length + \" log entries!\"))\n  .catch((e) => console.error(\"Error: \" + e));\n\n  return \"Created Log entries for user: \" + userObject.userName + \"(\" + userObject.userId + \")\"\n}","timeframe":{"from":"now-2h","to":"now"}}},"visualization":"raw"},"foldings":[],"height":54,"title":"Execute this script to create two log entries. Feel free to change currency","showInput":true},{"id":"fca63ac3-ab01-48eb-a583-94c59488184f","type":"markdown","markdown":"### Hands-On 1.2: Ingest Logs through OpenTelemetry\nWhile in Hands-On 1.1 we showed how easy it is to ingest logs using the Dynatrace API with the built-in JavaScript capabilities of the Dynatrace platform you will most likely ingest your logs from \"outside\" Dynatrace.\nDynatrace provides various ways to ingest logs as [explained here](https://www.dynatrace.com/support/help/observe-and-explore/logs/log-management-and-analytics)\n\nIn this Hands-On we will be sending logs to an OpenTelemetry Collector that forwards the Logs to Dynatrace. This will be a very common use case especially in Cloud Native and Kubernetes environments.\nWe have two options to setup that external environment\n1. (preferred) Using our [Data Driven DevOps Done Right GitHub Tutorial](https://github.com/dynatrace-perfclinics/data-driven-devops-tutorial)\n2. Using [Killacode Tutorial for Logpusher](https://killercoda.com/agardnerit/scenario/logpusherDT)\n\nBoth options will end up \n1. Running an OpenTelemetry Collector with Log Ingest and a Dynatrace OTLP Exporter\n2. Sending Log Lines using logpusher command line tool to that OTel Collector\n\n![](https://agardnerit.github.io/logpusher/assets/architecture.png)\n\nWe can use the following docker run method to create 2 similar log lines as the JavaScript example above did:\n```\nMYNAME=\"Ruler of OpenTelemetry\"\n\ndocker run --network host \\\ngardnera/logpusher:v0.1.0 \\\n --endpoint http://0.0.0.0:4318 \\\n --content \"Deposit EUR $(($RANDOM%1000)) $(hostname)\" \\\n --attributes user=\"${MYNAME}\" log.source=\"/var/log/workshop.log\" log.level=\"INFO\"\n\ndocker run --network host \\\ngardnera/logpusher:v0.1.0 \\\n --endpoint http://0.0.0.0:4318 \\\n --content \"Withdraw EUR $(($RANDOM%1000)) $(hostname)\" \\\n --attributes user=\"${MYNAME}\" log.source=\"/var/log/workshop.log\" log.level=\"INFO\"\n```"},{"id":"c02384df-6e21-4c29-8876-592540de7b49","type":"markdown","markdown":"## Step 2: Analyze Logs\nDQL gives us the ability to query all our data. To learn more about DQL use the following resources\n- [A Practical Guide to DQL (YouTube)](https://www.youtube.com/watch?v=F2VbVqNlswk)\n- [Learn DQL App](https://www.dynatrace.com/hub/detail/learn-dql/?query=learn+dq&filter=all)\n- [Learn DQL YouTube Channel](https://bit.ly/learndql)\n\nIn our use case we can answer several questions querying our data:\n1. View the last 50 log entries in /var/log/workshop.log\n2. Count the number of in our log.source=/var/log/workshop.log\n3. How many log entries by userName\n4. Parse log and extract type(deposit/withdraw) currency amount and userId\n5. How many log entries by userId (needs to parsed from content)\n6. Summary of Deposits and Withdrawls overall and split by user\n7. Show Deposits and Withdrawls over time"},{"id":"c4a39e65-7043-46ca-b200-f0a8ff67d530","type":"dql","showTitle":false,"state":{"input":{"value":"fetch logs\n| filter contains(log.source, \"workshop.log\")\n| sort timestamp desc\n| limit 50","timeframe":{"from":"now-30m","to":"now","details":{"from":{"type":"expression","normalized":"now-30m","date":"2023-10-23T11:34:51.895Z"},"to":{"type":"expression","normalized":"now","date":"2023-10-23T12:04:51.896Z"}}}},"state":"success","davis":{"includeLogs":true,"isDavisVisualizationAvailable":true},"visualizationSettings":{"thresholds":[],"chartSettings":{"gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"absolute"},"categoryOverrides":{}},"singleValue":{"label":"","prefixIcon":"","autoscale":true,"alignment":"center"},"table":{"rowDensity":"condensed","enableLineWrap":true,"enableSparklines":false,"hiddenColumns":[],"lineWrapIds":[],"firstVisibleRowIndex":0,"columnWidths":{}}},"result":{"code":200,"value":{"records":[{"timestamp":"2023-10-25T10:21:05.561000000+02:00","content":"Withdraw EUR 281 codespaces-1a44bd","event.type":"LOG","log.source":"/var/log/workshop.log","loglevel":"NONE","status":"NONE","dt.auth.origin":"dt0c01.DFOBJF2OXI4PGKYM7FAZRY4Q","log.level":"INFO","overwritten1.log.level":"INFO","overwritten1.log.source":"/var/log/workshop.log","overwritten1.user":"Ruler of OpenTelemetryy","user":"Ruler of OpenTelemetryy"},{"timestamp":"2023-10-25T10:21:04.528000000+02:00","content":"Deposit EUR 608 codespaces-1a44bd","event.type":"LOG","log.source":"/var/log/workshop.log","loglevel":"NONE","status":"NONE","dt.auth.origin":"dt0c01.DFOBJF2OXI4PGKYM7FAZRY4Q","log.level":"INFO","overwritten1.log.level":"INFO","overwritten1.log.source":"/var/log/workshop.log","overwritten1.user":"Ruler of OpenTelemetryy","user":"Ruler of OpenTelemetryy"},{"timestamp":"2023-10-25T10:06:50.926000000+02:00","content":"Withdraw EUR 777 codespaces-1a44bd","event.type":"LOG","log.source":"/var/log/workshop.log","loglevel":"NONE","status":"NONE","dt.auth.origin":"dt0c01.DFOBJF2OXI4PGKYM7FAZRY4Q","log.level":"INFO","overwritten1.log.level":"INFO","overwritten1.log.source":"/var/log/workshop.log","overwritten1.user":"Ruler","user":"Ruler"},{"timestamp":"2023-10-25T10:06:49.868000000+02:00","content":"Deposit EUR 952 codespaces-1a44bd","event.type":"LOG","log.source":"/var/log/workshop.log","loglevel":"NONE","status":"NONE","dt.auth.origin":"dt0c01.DFOBJF2OXI4PGKYM7FAZRY4Q","log.level":"INFO","overwritten1.log.level":"INFO","overwritten1.log.source":"/var/log/workshop.log","overwritten1.user":"Ruler","user":"Ruler"},{"timestamp":"2023-10-25T10:06:34.468000000+02:00","content":"Withdraw EUR 271 codespaces-1a44bd","event.type":"LOG","log.source":"/var/log/workshop.log","loglevel":"NONE","status":"NONE","dt.auth.origin":"dt0c01.DFOBJF2OXI4PGKYM7FAZRY4Q","log.level":"INFO","overwritten1.log.level":"INFO","overwritten1.log.source":"/var/log/workshop.log","overwritten1.user":"Ruler","user":"Ruler"},{"timestamp":"2023-10-25T10:01:47.570000000+02:00","content":"Withdraw EUR 280 codespaces-1a44bd","event.type":"LOG","log.source":"/var/log/workshop.log","loglevel":"NONE","status":"NONE","dt.auth.origin":"dt0c01.DFOBJF2OXI4PGKYM7FAZRY4Q","log.level":"INFO","overwritten1.log.level":"INFO","overwritten1.log.source":"/var/log/workshop.log","overwritten1.user":"Ruler","user":"Ruler"}],"metadata":{"grail":{"canonicalQuery":"fetch logs\n| filter contains(log.source, \"workshop.log\")\n| sort timestamp, direction:\"descending\"\n| limit 50","timezone":"Europe/Berlin","query":"fetch logs\n| filter contains(log.source, \"workshop.log\")\n| sort timestamp desc\n| limit 50","scannedRecords":2252529,"dqlVersion":"V1_0","scannedBytes":212245867,"analysisTimeframe":{"start":"2023-10-25T07:51:53.543Z","end":"2023-10-25T08:21:53.543Z"},"locale":"","executionTimeMilliseconds":28,"notifications":[],"queryId":"8ee4d63d-d368-405b-9fcc-2851b523052f","sampled":false}},"types":[{"mappings":{"timestamp":{"type":"timestamp"},"content":{"type":"string"},"event.type":{"type":"string"},"log.source":{"type":"string"},"loglevel":{"type":"string"},"status":{"type":"string"},"dt.auth.origin":{"type":"string"},"log.level":{"type":"string"},"overwritten1.log.level":{"type":"string"},"overwritten1.log.source":{"type":"string"},"overwritten1.user":{"type":"string"},"user":{"type":"string"}},"indexRange":[0,5]}]},"notifications":[],"dateTime":"2023-10-25T08:21:53.543Z","input":{"value":"fetch logs\n| filter contains(log.source, \"workshop.log\")\n| sort timestamp desc\n| limit 50","timeframe":{"from":"now-30m","to":"now","details":{"from":{"type":"expression","normalized":"now-30m","date":"2023-10-23T11:34:51.895Z"},"to":{"type":"expression","normalized":"now","date":"2023-10-23T12:04:51.896Z"}}}}},"visualization":"table"},"height":450,"title":"Hands-On 2.1: View the last 50 log entries in /var/log/workshop.log"},{"id":"fc48f29f-1b88-4ba7-8ae9-8495d67e9123","type":"dql","showTitle":false,"state":{"input":{"value":"fetch logs\n| filter contains(log.source, \"workshop.log\")\n| summarize count()","timeframe":{"from":"now-30m","to":"now","details":{"from":{"type":"expression","normalized":"now-30m","date":"2023-10-23T11:34:51.895Z"},"to":{"type":"expression","normalized":"now","date":"2023-10-23T12:04:51.896Z"}}}},"state":"success","davis":{"includeLogs":true,"isDavisVisualizationAvailable":true},"visualizationSettings":{"thresholds":[],"chartSettings":{"gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"absolute"},"categoryOverrides":{}},"singleValue":{"label":"","prefixIcon":"","autoscale":true,"alignment":"center"},"table":{"rowDensity":"condensed","enableLineWrap":true,"enableSparklines":false,"hiddenColumns":[],"lineWrapIds":[],"firstVisibleRowIndex":0,"columnWidths":{}}},"result":{"code":200,"value":{"records":[{"count()":"6"}],"metadata":{"grail":{"canonicalQuery":"fetch logs\n| filter contains(log.source, \"workshop.log\")\n| summarize count()","timezone":"Europe/Berlin","query":"fetch logs\n| filter contains(log.source, \"workshop.log\")\n| summarize count()","scannedRecords":2252529,"dqlVersion":"V1_0","scannedBytes":212245867,"analysisTimeframe":{"start":"2023-10-25T07:52:00.188Z","end":"2023-10-25T08:22:00.188Z"},"locale":"","executionTimeMilliseconds":21,"notifications":[],"queryId":"b6622d4a-5bc9-49a5-aeee-474fbb985933","sampled":false}},"types":[{"mappings":{"count()":{"type":"long"}},"indexRange":[0,0]}]},"notifications":[],"dateTime":"2023-10-25T08:22:00.188Z","input":{"value":"fetch logs\n| filter contains(log.source, \"workshop.log\")\n| summarize count()","timeframe":{"from":"now-30m","to":"now","details":{"from":{"type":"expression","normalized":"now-30m","date":"2023-10-23T11:34:51.895Z"},"to":{"type":"expression","normalized":"now","date":"2023-10-23T12:04:51.896Z"}}}}},"visualization":"table"},"height":85,"title":"Hands-On 2.2: Count the number of in our log.source=/var/log/workshop.log"},{"id":"0e320ba3-76ad-4977-8069-ba311850aabb","type":"dql","showTitle":false,"state":{"input":{"value":"fetch logs\n| filter contains(log.source, \"workshop.log\")\n| summarize count(), by:{user}","timeframe":{"from":"now-30m","to":"now","details":{"from":{"type":"expression","normalized":"now-30m","date":"2023-10-23T11:34:51.895Z"},"to":{"type":"expression","normalized":"now","date":"2023-10-23T12:04:51.896Z"}}}},"state":"success","davis":{"includeLogs":true,"isDavisVisualizationAvailable":true},"visualizationSettings":{"thresholds":[],"chartSettings":{"gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"absolute"},"categoryOverrides":{}},"singleValue":{"label":"","prefixIcon":"","autoscale":true,"alignment":"center"},"table":{"rowDensity":"condensed","enableLineWrap":true,"enableSparklines":false,"hiddenColumns":[],"lineWrapIds":[],"firstVisibleRowIndex":0,"columnWidths":{}}},"result":{"code":200,"value":{"records":[{"user":"Ruler","count()":"4"}],"metadata":{"grail":{"canonicalQuery":"fetch logs\n| filter contains(log.source, \"workshop.log\")\n| summarize by:{user}, count()","timezone":"Europe/Berlin","query":"fetch logs\n| filter contains(log.source, \"workshop.log\")\n| summarize count(), by:{user}","scannedRecords":2227893,"dqlVersion":"V1_0","scannedBytes":209926244,"analysisTimeframe":{"start":"2023-10-25T07:49:39.893Z","end":"2023-10-25T08:19:39.893Z"},"locale":"","executionTimeMilliseconds":29,"notifications":[],"queryId":"24ff23a1-a541-49b5-81ea-9df1ed2fd4b9","sampled":false}},"types":[{"mappings":{"user":{"type":"string"},"count()":{"type":"long"}},"indexRange":[0,0]}]},"notifications":[],"dateTime":"2023-10-25T08:19:39.892Z","input":{"value":"fetch logs\n| filter contains(log.source, \"workshop.log\")\n| summarize count(), by:{user}","timeframe":{"from":"now-30m","to":"now","details":{"from":{"type":"expression","normalized":"now-30m","date":"2023-10-23T11:34:51.895Z"},"to":{"type":"expression","normalized":"now","date":"2023-10-23T12:04:51.896Z"}}}}},"visualization":"table"},"height":85,"title":"Hands-On 2.3: How many log entries split created by user"},{"id":"8637fd30-8985-46bb-97de-57a156f83ebd","type":"dql","showTitle":false,"state":{"input":{"value":"fetch logs\n| filter contains(log.source, \"workshop.log\")\n| parse content, \"\"\"STRING:type LD STRING:currency LD INTEGER:amount LD STRING:userId\"\"\"","timeframe":{"from":"now-30m","to":"now","details":{"from":{"type":"expression","normalized":"now-30m","date":"2023-10-23T11:34:51.895Z"},"to":{"type":"expression","normalized":"now","date":"2023-10-23T12:04:51.896Z"}}}},"state":"success","davis":{"includeLogs":true,"isDavisVisualizationAvailable":true},"visualizationSettings":{"thresholds":[],"chartSettings":{"gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"absolute"},"categoryOverrides":{}},"singleValue":{"label":"","prefixIcon":"","autoscale":true,"alignment":"center"},"table":{"rowDensity":"condensed","enableLineWrap":true,"enableSparklines":false,"hiddenColumns":[],"lineWrapIds":[],"firstVisibleRowIndex":1,"columnWidths":{}}},"result":{"code":200,"value":{"records":[{"timestamp":"2023-10-24T10:52:09.488000000+02:00","content":"Deposit EUR 432 e53e640c-e612-4e02-b3b9-1d3bae05cc11","type":"Deposit","currency":"EUR","amount":"432","userId":"e53e640c-e612-4e02-b3b9-1d3bae05cc11","event.type":"LOG","log.source":"/var/log/workshop.log","loglevel":"NONE","status":"NONE","log.level":"INFO","log.tag":["tag1","tag2"],"user":"Andreas Grabner"},{"timestamp":"2023-10-24T10:52:09.489000000+02:00","content":"Withdraw EUR 420 e53e640c-e612-4e02-b3b9-1d3bae05cc11","type":"Withdraw","currency":"EUR","amount":"420","userId":"e53e640c-e612-4e02-b3b9-1d3bae05cc11","event.type":"LOG","log.source":"/var/log/workshop.log","loglevel":"NONE","status":"NONE","log.level":"INFO","log.tag":["tag1","tag2"],"user":"Andreas Grabner"},{"timestamp":"2023-10-24T10:52:17.140000000+02:00","content":"Deposit EUR 703 e53e640c-e612-4e02-b3b9-1d3bae05cc11","type":"Deposit","currency":"EUR","amount":"703","userId":"e53e640c-e612-4e02-b3b9-1d3bae05cc11","event.type":"LOG","log.source":"/var/log/workshop.log","loglevel":"NONE","status":"NONE","log.level":"INFO","log.tag":["tag1","tag2"],"user":"Andreas Grabner"},{"timestamp":"2023-10-24T10:52:17.140000000+02:00","content":"Withdraw EUR 640 e53e640c-e612-4e02-b3b9-1d3bae05cc11","type":"Withdraw","currency":"EUR","amount":"640","userId":"e53e640c-e612-4e02-b3b9-1d3bae05cc11","event.type":"LOG","log.source":"/var/log/workshop.log","loglevel":"NONE","status":"NONE","log.level":"INFO","log.tag":["tag1","tag2"],"user":"Andreas Grabner"}],"metadata":{"grail":{"canonicalQuery":"fetch logs\n| filter contains(log.source, \"workshop.log\")\n| parse content, \"STRING:type LD STRING:currency LD INTEGER:amount LD STRING:userId\"","timezone":"Europe/Berlin","query":"fetch logs\n| filter contains(log.source, \"workshop.log\")\n| parse content, \"\"\"STRING:type LD STRING:currency LD INTEGER:amount LD STRING:userId\"\"\"","scannedRecords":2436773,"dqlVersion":"V1_0","scannedBytes":229560300,"analysisTimeframe":{"start":"2023-10-24T08:29:49.773Z","end":"2023-10-24T08:59:49.773Z"},"locale":"","executionTimeMilliseconds":23,"notifications":[],"queryId":"bbb9b1ce-8991-4d7a-a6d9-e28c0e1c1f71","sampled":false}},"types":[{"mappings":{"timestamp":{"type":"timestamp"},"content":{"type":"string"},"type":{"type":"string"},"currency":{"type":"string"},"amount":{"type":"long"},"userId":{"type":"string"},"event.type":{"type":"string"},"log.source":{"type":"string"},"loglevel":{"type":"string"},"status":{"type":"string"},"log.level":{"type":"string"},"log.tag":{"type":"array","types":[{"mappings":{"element":{"type":"string"}},"indexRange":[0,1]}]},"user":{"type":"string"}},"indexRange":[0,3]}]},"notifications":[],"dateTime":"2023-10-24T08:59:49.771Z","input":{"value":"fetch logs\n| filter contains(log.source, \"workshop.log\")\n| parse content, \"\"\"STRING:type LD STRING:currency LD INTEGER:amount LD STRING:userId\"\"\"","timeframe":{"from":"now-30m","to":"now","details":{"from":{"type":"expression","normalized":"now-30m","date":"2023-10-23T11:34:51.895Z"},"to":{"type":"expression","normalized":"now","date":"2023-10-23T12:04:51.896Z"}}}}},"visualization":"table"},"height":168,"title":"Hands-On 2.4: Parse log and extract type(deposit/withdraw) currency amount and userId"},{"id":"ea23d7fa-a56d-4824-80cb-595c7ac2e04d","type":"dql","showTitle":false,"state":{"input":{"value":"fetch logs\n| filter contains(log.source, \"workshop.log\")\n| parse content, \"\"\"STRING:type LD STRING:currency LD INTEGER:amount LD STRING:userId\"\"\"\n| summarize count = count(), by:{userId}","timeframe":{"from":"now-2h","to":"now","details":{"from":{"type":"expression","normalized":"now-2h","date":"2023-10-24T08:04:59.935Z"},"to":{"type":"expression","normalized":"now","date":"2023-10-24T10:04:59.936Z"}}}},"state":"success","davis":{"includeLogs":true,"isDavisVisualizationAvailable":true},"visualizationSettings":{"thresholds":[],"chartSettings":{"gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"absolute"},"categoryOverrides":{}},"singleValue":{"label":"","prefixIcon":"","autoscale":true,"alignment":"center"},"table":{"rowDensity":"condensed","enableLineWrap":true,"enableSparklines":false,"hiddenColumns":[],"lineWrapIds":[],"firstVisibleRowIndex":0,"columnWidths":{}}},"result":{"code":200,"value":{"records":[{"userId":"Andreas","count":"4"},{"userId":"[object","count":"4"},{"userId":"andreas.grabner@dynatrace.com","count":"2"},{"userId":"e53e640c-e612-4e02-b3b9-1d3bae05cc11","count":"8"},{"userId":"undefined","count":"2"}],"metadata":{"grail":{"canonicalQuery":"fetch logs\n| filter contains(log.source, \"workshop.log\")\n| parse content, \"STRING:type LD STRING:currency LD INTEGER:amount LD STRING:userId\"\n| summarize by:{userId}, count(), alias:count","timezone":"Europe/Berlin","query":"fetch logs\n| filter contains(log.source, \"workshop.log\")\n| parse content, \"\"\"STRING:type LD STRING:currency LD INTEGER:amount LD STRING:userId\"\"\"\n| summarize count = count(), by:{userId}","scannedRecords":3209885,"dqlVersion":"V1_0","scannedBytes":302480619,"analysisTimeframe":{"start":"2023-10-24T08:05:00.933Z","end":"2023-10-24T10:05:00.933Z"},"locale":"","executionTimeMilliseconds":27,"notifications":[],"queryId":"dd86f025-fac8-4056-8950-054c2ff7e69e","sampled":false}},"types":[{"mappings":{"userId":{"type":"string"},"count":{"type":"long"}},"indexRange":[0,4]}]},"notifications":[],"dateTime":"2023-10-24T10:05:00.932Z","input":{"value":"fetch logs\n| filter contains(log.source, \"workshop.log\")\n| parse content, \"\"\"STRING:type LD STRING:currency LD INTEGER:amount LD STRING:userId\"\"\"\n| summarize count = count(), by:{userId}","timeframe":{"from":"now-2h","to":"now","details":{"from":{"type":"expression","normalized":"now-2h","date":"2023-10-24T08:04:59.935Z"},"to":{"type":"expression","normalized":"now","date":"2023-10-24T10:04:59.936Z"}}}}},"visualization":"table"},"height":168,"title":"Hands-On 2.5: How many log entries by userId (needs to parsed from content)"},{"id":"adc8d008-d9d5-4a68-9cb7-e53eb75949c0","type":"dql","showTitle":false,"state":{"input":{"value":"fetch logs\n| filter contains(log.source, \"workshop.log\")\n| parse content, \"\"\"STRING:type LD STRING:currency LD INTEGER:amount LD STRING:userId\"\"\"\n| summarize sumDeposit=sum(if(type==\"Deposit\",toLong(amount),else:0)), \n            sumWithdrawl=sum(if(type==\"Withdraw\",toLong(amount),else:0)), by:{userId}","timeframe":{"from":"now-2h","to":"now","details":{"from":{"type":"expression","normalized":"now-2h","date":"2023-10-24T08:04:59.935Z"},"to":{"type":"expression","normalized":"now","date":"2023-10-24T10:04:59.936Z"}}}},"state":"success","davis":{"includeLogs":true,"isDavisVisualizationAvailable":true},"visualizationSettings":{"thresholds":[],"chartSettings":{"gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"absolute"},"categoryOverrides":{}},"singleValue":{"label":"","prefixIcon":"","autoscale":true,"alignment":"center"},"table":{"rowDensity":"condensed","enableLineWrap":true,"enableSparklines":false,"hiddenColumns":[],"lineWrapIds":[],"firstVisibleRowIndex":0,"columnWidths":{}}},"result":{"code":200,"value":{"records":[{"userId":"codespaces-1a44bd","sumDeposit":1560,"sumWithdrawl":1609}],"metadata":{"grail":{"canonicalQuery":"fetch logs\n| filter contains(log.source, \"workshop.log\")\n| parse content, \"STRING:type LD STRING:currency LD INTEGER:amount LD STRING:userId\"\n| summarize by:{userId}, {{sum(if(type == \"Deposit\", toLong(amount), else:0)), alias:sumDeposit}, {sum(if(type == \"Withdraw\", toLong(amount), else:0)), alias:sumWithdrawl}}","timezone":"Europe/Berlin","query":"fetch logs\n| filter contains(log.source, \"workshop.log\")\n| parse content, \"\"\"STRING:type LD STRING:currency LD INTEGER:amount LD STRING:userId\"\"\"\n| summarize sumDeposit=sum(if(type==\"Deposit\",toLong(amount),else:0)), \n            sumWithdrawl=sum(if(type==\"Withdraw\",toLong(amount),else:0)), by:{userId}","scannedRecords":2483448,"dqlVersion":"V1_0","scannedBytes":234006525,"analysisTimeframe":{"start":"2023-10-25T06:41:20.024Z","end":"2023-10-25T08:41:20.024Z"},"locale":"","executionTimeMilliseconds":36,"notifications":[{"severity":"INFO","messageFormat":"The parameters should be grouped with curly braces: {}.","syntaxPosition":{"start":{"column":13,"index":158,"line":4},"end":{"column":72,"index":289,"line":5}},"messageFormatSpecifierTypes":[],"arguments":[],"notificationType":"PARAMETERS_SHOULD_BE_GROUPED","message":"The parameters should be grouped with curly braces: {}."}],"queryId":"382736bd-bb9c-4009-884d-64d5b321d4da","sampled":false}},"types":[{"mappings":{"userId":{"type":"string"},"sumDeposit":{"type":"double"},"sumWithdrawl":{"type":"double"}},"indexRange":[0,0]}]},"notifications":[{"message":"The parameters should be grouped with curly braces: {}.","severity":"info"}],"dateTime":"2023-10-25T08:41:20.023Z","input":{"value":"fetch logs\n| filter contains(log.source, \"workshop.log\")\n| parse content, \"\"\"STRING:type LD STRING:currency LD INTEGER:amount LD STRING:userId\"\"\"\n| summarize sumDeposit=sum(if(type==\"Deposit\",toLong(amount),else:0)), \n            sumWithdrawl=sum(if(type==\"Withdraw\",toLong(amount),else:0)), by:{userId}","timeframe":{"from":"now-2h","to":"now","details":{"from":{"type":"expression","normalized":"now-2h","date":"2023-10-24T08:04:59.935Z"},"to":{"type":"expression","normalized":"now","date":"2023-10-24T10:04:59.936Z"}}}}},"visualization":"table"},"height":168,"title":"Hands-On 2.6: Summary of Deposits and Withdrawls overall and split by user"},{"id":"3c018c1c-c498-4ff0-99bc-b910745d7cd4","type":"dql","showTitle":false,"state":{"input":{"value":"fetch logs\n| filter contains(log.source, \"workshop.log\")\n| parse content, \"\"\"STRING:type LD STRING:currency LD INTEGER:amount LD STRING:userId\"\"\"\n| summarize sumDeposit=sum(if(type==\"Deposit\",toLong(amount),else:0)), \n            sumWithdrawl=sum(if(type==\"Withdraw\",toLong(amount),else:0)), by:{bin(timestamp,1m)}","timeframe":{"from":"now-2h","to":"now","details":{"from":{"type":"expression","normalized":"now-2h","date":"2023-10-24T08:04:59.935Z"},"to":{"type":"expression","normalized":"now","date":"2023-10-24T10:04:59.936Z"}}}},"state":"success","davis":{"includeLogs":true,"isDavisVisualizationAvailable":true},"visualizationSettings":{"thresholds":[],"chartSettings":{"gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"absolute"},"categoryOverrides":{}},"singleValue":{"label":"","prefixIcon":"","autoscale":true,"alignment":"center"},"table":{"rowDensity":"condensed","enableLineWrap":true,"enableSparklines":false,"hiddenColumns":[],"lineWrapIds":[],"firstVisibleRowIndex":0,"columnWidths":{}}},"result":{"code":200,"value":{"records":[{"bin(timestamp, 1m)":"2023-10-25T10:01:00.000000000+02:00","sumDeposit":0,"sumWithdrawl":280},{"bin(timestamp, 1m)":"2023-10-25T10:06:00.000000000+02:00","sumDeposit":952,"sumWithdrawl":1048},{"bin(timestamp, 1m)":"2023-10-25T10:21:00.000000000+02:00","sumDeposit":608,"sumWithdrawl":281}],"metadata":{"grail":{"canonicalQuery":"fetch logs\n| filter contains(log.source, \"workshop.log\")\n| parse content, \"STRING:type LD STRING:currency LD INTEGER:amount LD STRING:userId\"\n| summarize by:{bin(timestamp, 1m)}, {{sum(if(type == \"Deposit\", toLong(amount), else:0)), alias:sumDeposit}, {sum(if(type == \"Withdraw\", toLong(amount), else:0)), alias:sumWithdrawl}}","timezone":"Europe/Berlin","query":"fetch logs\n| filter contains(log.source, \"workshop.log\")\n| parse content, \"\"\"STRING:type LD STRING:currency LD INTEGER:amount LD STRING:userId\"\"\"\n| summarize sumDeposit=sum(if(type==\"Deposit\",toLong(amount),else:0)), \n            sumWithdrawl=sum(if(type==\"Withdraw\",toLong(amount),else:0)), by:{bin(timestamp,1m)}","scannedRecords":2254224,"dqlVersion":"V1_0","scannedBytes":212419985,"analysisTimeframe":{"start":"2023-10-25T06:22:10.929Z","end":"2023-10-25T08:22:10.929Z"},"locale":"","executionTimeMilliseconds":36,"notifications":[{"severity":"INFO","messageFormat":"The parameters should be grouped with curly braces: {}.","syntaxPosition":{"start":{"column":13,"index":158,"line":4},"end":{"column":72,"index":289,"line":5}},"messageFormatSpecifierTypes":[],"arguments":[],"notificationType":"PARAMETERS_SHOULD_BE_GROUPED","message":"The parameters should be grouped with curly braces: {}."}],"queryId":"4adaeeac-8402-4072-92ae-b266d5b90620","sampled":false}},"types":[{"mappings":{"bin(timestamp, 1m)":{"type":"timestamp"},"sumDeposit":{"type":"double"},"sumWithdrawl":{"type":"double"}},"indexRange":[0,2]}]},"notifications":[{"message":"The parameters should be grouped with curly braces: {}.","severity":"info"}],"dateTime":"2023-10-25T08:22:10.928Z","input":{"value":"fetch logs\n| filter contains(log.source, \"workshop.log\")\n| parse content, \"\"\"STRING:type LD STRING:currency LD INTEGER:amount LD STRING:userId\"\"\"\n| summarize sumDeposit=sum(if(type==\"Deposit\",toLong(amount),else:0)), \n            sumWithdrawl=sum(if(type==\"Withdraw\",toLong(amount),else:0)), by:{bin(timestamp,1m)}","timeframe":{"from":"now-2h","to":"now","details":{"from":{"type":"expression","normalized":"now-2h","date":"2023-10-24T08:04:59.935Z"},"to":{"type":"expression","normalized":"now","date":"2023-10-24T10:04:59.936Z"}}}}},"visualization":"areaChart"},"height":168,"title":"Hands-On 2.7: Show Deposits and Withdrawls over time"},{"id":"3cfbcf48-f0a8-4d51-842f-6d282be7d786","type":"markdown","markdown":"## Step 3: Automate based on Log Data\nThere are many automation use cases we can now implement using Dynatrace Workflows. To give you some examples:\n1. A Daily summary of deposits vs withdraws highlighting the top 3 users to our business\n2. A Daily report of users withdrawing more than depositing\n3. An alert in case somebody withdraws more than 1000\n4. An alert for every transaction of a high-profile user\n5. A periodic checker that validates that userIds and username match and no fraud is committed\n6. A periodic worker that calculates a daily summary across all currencies and creates a single master currency BizEvent with total withdraw and deposit!\n\nIn the workshop feel free to experiment and implement one or more workflows based on the above or even additional use cases.\nLets walk through some simple use cases together!"},{"id":"7054bae3-710b-4483-b9a9-d76e3ccaf52c","type":"markdown","markdown":"### Hands-On 3.1: Daily Summary Report\nThe approach to building a data-driven workflow is very easy. \n1. Create the DQL that gives us the data we need in a Notebook\n2. Create the Workflow directly from the Notebook (via the Open With Menu Item)\n3. Extend the Workflow with additional steps, e.g: Sending a message to an external messaging system (Slack, Teams ...)\n\n#### DQL Query already available\nFor our use case we already have the DQL Query ready ==> see one of our hands-on above. We can create the workflow right from that DQL query tile.\n\n```\nfetch logs\n| filter contains(log.source, \"workshop.log\")\n| parse content, \"\"\"STRING:type LD STRING:currency LD INTEGER:amount LD STRING:userId\"\"\"\n| summarize sumDeposit=sum(if(type==\"Deposit\",toLong(amount),else:0)), \n            sumWithdrawl=sum(if(type==\"Withdraw\",toLong(amount),else:0)), by:{userId}\n```\n\n#### Using Webhook.Site as our \"Messaging Service\"\nAs we don't have a shared messaging system (Slack, Teams, ServiceNow, ...) we can use a free available API Endpoint Service such as [https://webhook.site/]\nPlease open [https://webhook.site/] in a separate browser. It will automatically give you a unique URL that we can later use in the Workflow to send a Message to. This will act as our \"poor mans messaging system\" :-)\n\nYou can then create a HTTP Request task with the following parameters:\n```\nMethod: POST\nURL: https://webhook.site/xxxxxxxx-yyyyyy-aaaaaa-ccccccccc\n\nPayload:\n{% for resultItem in result(\"execute_dql_query_1\").records  %}\n\tuserId : {{ resultItem.userId }}\n\tsumDeposit : {{ resultItem.sumDeposit }}\n\tuserId : {{ resultItem.sumWithdrawl }}\n{% endfor %}\n```\n\n#### Putting it all together\nOnce we have the full workflow put together we can define a schedule or even have it triggered through an event\n**BEST PRACTICE** Make sure to give the workflow a good name. By default it will say \"Untitled Workflow\". I suggest something like \"Daily Report YOURNAME\""}]}