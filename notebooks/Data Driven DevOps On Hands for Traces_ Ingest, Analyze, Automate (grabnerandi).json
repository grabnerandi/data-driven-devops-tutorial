{"version":"5","defaultTimeframe":{"from":"now-2h","to":"now"},"sections":[{"id":"e1d6ab15-c725-4d0c-be59-cf017138acd6","type":"markdown","markdown":"# Data Driven DevOps On Hands for Traces: Ingest, Analyze, Automate\n\n**START BY CREATING A COPY OF THIS NOTEBOOK OR EXPORT & IMPORT TO YOUR OWN DYNATRACE TENANT**\n\n---\n\n**Got feedback or questions?**: [devrel@dynatrace.com](mailto:devrel@dynatrace.com?subject=DataDrivenDevOps%20Traces%20HandsOn)\n\n**Rest of tutorial on GitHub:** [Data-Driven DevOps Done Right with Dynatrace Tutorial](https://github.com/dynatrace-perfclinics/data-driven-devops-tutorial)\n\n---\n\nThis is the companion notebook for the Traces Hands-On Workshop. \nYou will learn about how to \n- INGEST Traces into Dynatrace\n- ANALYZE them using DQL, the distributed traces and services screen \n- AUTOMATE using Dynatrace Workflows and Site Reliability Guardian\n\n![](https://github.com/dynatrace-perfclinics/data-driven-devops-tutorial/raw/main/images/traces-handson-overview.png)"},{"id":"cb25cab1-6626-45a3-8463-88a604e283a1","type":"markdown","markdown":"## Step 1: INGEST Traces into Dynatrace via OpenTelemetry Collector\nMost of the traces are captured fully automatically using Dynatrace OneAgent. OneAgent can auto-instrument your apps or can capture OpenTelemetry traces from your instrumented apps.\nToday we are focusing on the cloud-native way of ingesting traces to Dynatrace which is having an OpenTelemetry Collector that forwards traces sent to the collector to the Dynatrace OTLP endpoint.\n"},{"id":"087f3fd1-742f-4a56-af9b-c2f820af749f","type":"markdown","markdown":"### Hands-On 1.1: Ingest Traces through OpenTelemetry\nIn this Hands-On we will be sending traces to an OpenTelemetry Collector that forwards the traces to Dynatrace. This will be a very common use case especially in Cloud Native and Kubernetes environments.\nWe have two options to setup that external environment\n1. (preferred) Using our [Data Driven DevOps Done Right GitHub Tutorial](https://github.com/dynatrace-perfclinics/data-driven-devops-tutorial)\n2. Using [Killacode Tutorial for Tracepusher](https://killercoda.com/agardnerit/scenario/tracepusherDT)\n\nBoth options will end up \n1. Running an OpenTelemetry Collector with Log Ingest and a Dynatrace OTLP Exporter\n2. Sending Traces using tracepusher command line tool to that OTel Collector\n\n![](https://agardnerit.github.io/tracepusher/assets/architecture.png)\n\nWe can use the following docker run method to create a simple trace which will be detected as its own service in Dynatrace as we use your hostname to make the service unique:\n```\nduration=$(($RANDOM%10))\ndocker run --network host \\\ngardnera/tracepusher:v0.8.0 \\\n --endpoint http://0.0.0.0:4318 \\\n --service-name \"workshop-service-$(hostname)\" \\\n --span-name \"demorequest\" \\\n --duration ${duration} \\\n --span-kind SERVER \\\n --span-attributes rpc.service=\"execute\" rpc.method=\"get\"\n```\n\nWe have another script in that GitHub repo that will create a more complex trace including a log that links to that trace. To execute this please run:\n```\n./tracegen.sh\n``` \n\nNow you should have created 2 traces for the same service. Lets analyze those traces"},{"id":"57250123-75a0-4fdd-85d9-ceb6ab8553e3","type":"markdown","markdown":"## Step 2: Analyze Traces in Dynatrace\nThere are different ways to analyze traces and we will look into all of them\n1. Through the Distributed Traces App\n2. Through the Service App\n3. Through DQL"},{"id":"3ffa9173-8c86-4630-9c92-511f349dfe89","type":"markdown","markdown":"### Hands-On 2.1: Analyzing our traces through the Distributed Traces App\n3 Simple Steps to find our traces:\n1. Open up the Distributed Traces App by e.g: Ctrl+K search for distributed.\n2. In that traces app you can switch to \"Ingested Traces\" and then search for the service that starts with \"workshop\". You should find a list of traces that were just generated.\n3. Click on one of those traces to get the detailed trace view"},{"id":"5765f837-7442-4a15-b32c-4f536f9d4544","type":"markdown","markdown":"### Hands-On 2.2: Analyzing your traces through the Services App\nEvery trace is associated to a service. For OpenTelemetry traces that means the service gets identified through the service name attribute that is part of an OpenTelemetry trace. Here the way to find your service:\n1. Open the Services App by e.g: Ctrl+K and search for service\n2. In that list search for services that start with \"workshop\"\n3. In the service view you can see all high-level metrics, all traces and logs ...\n\nAnother easy way to find those services is via the advanced search option by entity type:\n1. Open the search (Ctrl+K)\n2. Type in `>service` then enter\n3. Type in `workshop-service` and you will find all services that have been created through the workshop"},{"id":"02f990d7-2cdb-45ba-b0f8-57a00353acbb","type":"markdown","markdown":"### Hands-On 2.3: Find your traces through DQL in a Notebook\nAll traces are also available in Grail (currently in preview but GA soon). This allows us to query spans (which are the parts that make up a trace) through DQL.\nThe following DQL command fetches all spans of services that have `workshop-service` in their name and represent a so called server span type\n\n```\nfetch spans\n| filter contains(dt.entity.service.name,\"workshop-service\") and span.kind == \"server\"\n```\n\nSee below for more examples on querying our traces & spans"},{"id":"a3642e54-897b-403c-ae42-4d5e1b8c9c42","type":"dql","showTitle":false,"state":{"input":{"value":"fetch spans\n | filter contains(dt.entity.service.name,\"workshop-service\") and span.kind == \"server\"\n | limit 10","timeframe":{"from":"now-2h","to":"now"}},"state":"success","davis":{"includeLogs":true,"isDavisVisualizationAvailable":true},"visualizationSettings":{"thresholds":[],"chartSettings":{"gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"absolute"},"categoryOverrides":{},"categoricalBarChartSettings":{"categoryAxis":"span.name","categoryAxisLabel":"span.name","valueAxis":"toLong(min(duration)) / 1000000000","valueAxisLabel":"toLong(min(duration)) / 1000000000"}},"singleValue":{"label":"","prefixIcon":"","autoscale":true,"alignment":"center"},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"lineWrapIds":[],"firstVisibleRowIndex":0,"columnWidths":{},"enableLineWrap":true}},"result":{"code":200,"value":{"records":[{"timestamp":"2023-10-25T12:23:06.881283950+02:00","app":"tracegen.sh","dt.entity.service":"SERVICE-8B770878C18EFF29","dt.entity.service.name":"workshop-service-codespaces-e14554","dt.internal.is_failed":false,"duration":"4000000000","endpoint.name":"tracegen.sh","instrumentation_scope.name":"manual-test","instrumentation_scope.version":"","service.name":"workshop-service-codespaces-e14554","span.id":"fcd5c147f4b8f3c7","span.kind":"server","span.name":"tracegen.sh","supportability.endpoint_name_rule":"span.name fallback","trace.id":"d35e4c6efbd7107a3ca62304bb962901","end_time":"2023-10-25T12:23:10.881283950+02:00","start_time":"2023-10-25T12:23:06.881283950+02:00"},{"timestamp":"2023-10-25T12:17:05.385759218+02:00","app":"tracegen.sh","dt.entity.service":"SERVICE-8B770878C18EFF29","dt.entity.service.name":"workshop-service-codespaces-e14554","dt.internal.is_failed":false,"duration":"4000000000","endpoint.name":"tracegen.sh","instrumentation_scope.name":"manual-test","instrumentation_scope.version":"","service.name":"workshop-service-codespaces-e14554","span.id":"168e396a5d3dd80b","span.kind":"server","span.name":"tracegen.sh","supportability.endpoint_name_rule":"span.name fallback","trace.id":"fb8f11caafef5cd2c3b77b82c6d5f126","end_time":"2023-10-25T12:17:09.385759218+02:00","start_time":"2023-10-25T12:17:05.385759218+02:00"},{"timestamp":"2023-10-25T12:19:49.970350578+02:00","dt.entity.service":"SERVICE-8B770878C18EFF29","dt.entity.service.name":"workshop-service-codespaces-e14554","dt.internal.is_failed":false,"duration":"1000000000","endpoint.name":"execute.get","instrumentation_scope.name":"manual-test","instrumentation_scope.version":"","rpc.method":"get","rpc.service":"execute","service.name":"workshop-service-codespaces-e14554","span.id":"935ede974eda1955","span.kind":"server","span.name":"demorequest","supportability.endpoint_name_rule":"rpc.method, rpc.service","trace.id":"82e87def47a132dc8595b286dfec6fbb","end_time":"2023-10-25T12:19:50.970350578+02:00","start_time":"2023-10-25T12:19:49.970350578+02:00"}],"metadata":{"grail":{"canonicalQuery":"fetch spans\n| filter contains(dt.entity.service.name, \"workshop-service\") AND span.kind == \"server\"\n| limit 10","timezone":"Europe/Berlin","query":"fetch spans\n | filter contains(dt.entity.service.name,\"workshop-service\") and span.kind == \"server\"\n | limit 10","scannedRecords":1723319,"dqlVersion":"V1_0","scannedBytes":120122243,"analysisTimeframe":{"start":"2023-10-25T09:08:33.850Z","end":"2023-10-25T11:08:33.850Z"},"locale":"","executionTimeMilliseconds":35,"notifications":[],"queryId":"f9b6752c-2598-489b-822e-3d020f55f73a","sampled":false}},"types":[{"mappings":{"timestamp":{"type":"timestamp"},"app":{"type":"string"},"dt.entity.service":{"type":"string"},"dt.entity.service.name":{"type":"string"},"dt.internal.is_failed":{"type":"boolean"},"duration":{"type":"duration"},"endpoint.name":{"type":"string"},"instrumentation_scope.name":{"type":"string"},"instrumentation_scope.version":{"type":"string"},"service.name":{"type":"string"},"span.id":{"type":"string"},"span.kind":{"type":"string"},"span.name":{"type":"string"},"supportability.endpoint_name_rule":{"type":"string"},"trace.id":{"type":"string"},"end_time":{"type":"timestamp"},"start_time":{"type":"timestamp"}},"indexRange":[0,1]},{"mappings":{"timestamp":{"type":"timestamp"},"dt.entity.service":{"type":"string"},"dt.entity.service.name":{"type":"string"},"dt.internal.is_failed":{"type":"boolean"},"duration":{"type":"duration"},"endpoint.name":{"type":"string"},"instrumentation_scope.name":{"type":"string"},"instrumentation_scope.version":{"type":"string"},"rpc.method":{"type":"string"},"rpc.service":{"type":"string"},"service.name":{"type":"string"},"span.id":{"type":"string"},"span.kind":{"type":"string"},"span.name":{"type":"string"},"supportability.endpoint_name_rule":{"type":"string"},"trace.id":{"type":"string"},"end_time":{"type":"timestamp"},"start_time":{"type":"timestamp"}},"indexRange":[2,2]}]},"notifications":[],"dateTime":"2023-10-25T11:08:33.850Z","input":{"value":"fetch spans\n | filter contains(dt.entity.service.name,\"workshop-service\") and span.kind == \"server\"\n | limit 10","timeframe":{"from":"now-2h","to":"now"}}},"visualization":"table"},"height":234,"title":"2.3.1: Get last 10 server spans from workshop-services"},{"id":"ac2335c4-c7d2-4f3d-a9b9-6246c857de24","type":"dql","showTitle":false,"state":{"input":{"value":"fetch spans\n | filter contains(dt.entity.service.name,\"workshop-service\")\n | summarize serverSpanCount=countIf(span.kind==\"server\"), nonServerSpanCount=countIf(span.kind!=\"server\"), by:{dt.entity.service.name}","timeframe":{"from":"now-2h","to":"now"}},"state":"success","davis":{"includeLogs":true,"isDavisVisualizationAvailable":true},"visualizationSettings":{"thresholds":[],"chartSettings":{"gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"absolute"},"categoryOverrides":{},"categoricalBarChartSettings":{"categoryAxis":"span.name","categoryAxisLabel":"span.name","valueAxis":"toLong(min(duration)) / 1000000000","valueAxisLabel":"toLong(min(duration)) / 1000000000"}},"singleValue":{"label":"","prefixIcon":"","autoscale":true,"alignment":"center"},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"lineWrapIds":[],"firstVisibleRowIndex":0,"columnWidths":{},"enableLineWrap":true}},"result":{"code":200,"value":{"records":[{"dt.entity.service.name":"workshop-service-codespaces-e14554","serverSpanCount":"3","nonServerSpanCount":"6"}],"metadata":{"grail":{"canonicalQuery":"fetch spans\n| filter contains(dt.entity.service.name, \"workshop-service\")\n| summarize by:{dt.entity.service.name}, {{countIf(span.kind == \"server\"), alias:serverSpanCount}, {countIf(span.kind != \"server\"), alias:nonServerSpanCount}}","timezone":"Europe/Berlin","query":"fetch spans\n | filter contains(dt.entity.service.name,\"workshop-service\")\n | summarize serverSpanCount=countIf(span.kind==\"server\"), nonServerSpanCount=countIf(span.kind!=\"server\"), by:{dt.entity.service.name}","scannedRecords":1746525,"dqlVersion":"V1_0","scannedBytes":121742884,"analysisTimeframe":{"start":"2023-10-25T09:11:25.993Z","end":"2023-10-25T11:11:25.993Z"},"locale":"","executionTimeMilliseconds":26,"notifications":[{"severity":"INFO","messageFormat":"The parameters should be grouped with curly braces: {}.","syntaxPosition":{"start":{"column":14,"index":87,"line":3},"end":{"column":106,"index":179,"line":3}},"messageFormatSpecifierTypes":[],"arguments":[],"notificationType":"PARAMETERS_SHOULD_BE_GROUPED","message":"The parameters should be grouped with curly braces: {}."}],"queryId":"2ae8264f-8dc5-44ee-95cc-0bddd95aa34e","sampled":false}},"types":[{"mappings":{"dt.entity.service.name":{"type":"string"},"serverSpanCount":{"type":"long"},"nonServerSpanCount":{"type":"long"}},"indexRange":[0,0]}]},"notifications":[{"message":"The parameters should be grouped with curly braces: {}.","severity":"info"}],"dateTime":"2023-10-25T11:11:25.993Z","input":{"value":"fetch spans\n | filter contains(dt.entity.service.name,\"workshop-service\")\n | summarize serverSpanCount=countIf(span.kind==\"server\"), nonServerSpanCount=countIf(span.kind!=\"server\"), by:{dt.entity.service.name}","timeframe":{"from":"now-2h","to":"now"}}},"visualization":"table"},"height":140,"title":"2.3.2: Number of server and non-server spans split by service entity"},{"id":"0e31757f-dc82-4998-b9be-67576d8245b8","type":"dql","showTitle":false,"state":{"input":{"value":"fetch spans\n | filter span.kind == \"server\"\n | summarize min(duration), max(duration), avg(duration), percentile(duration,90), by:{span.name}","timeframe":{"from":"now-2h","to":"now"}},"state":"success","davis":{"includeLogs":true,"isDavisVisualizationAvailable":true},"visualizationSettings":{"thresholds":[],"chartSettings":{"gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"absolute"},"categoryOverrides":{},"categoricalBarChartSettings":{"categoryAxis":"span.name","categoryAxisLabel":"span.name","valueAxis":"toLong(min(duration)) / 1000000000","valueAxisLabel":"toLong(min(duration)) / 1000000000"}},"singleValue":{"label":"","prefixIcon":"","autoscale":true,"alignment":"center"},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"lineWrapIds":[],"firstVisibleRowIndex":5,"columnWidths":{},"enableLineWrap":true}},"result":{"code":200,"value":{"records":[{"span.name":"<anonymous>","min(duration)":"250000","max(duration)":"23651000","avg(duration)":"693025","percentile(duration, 90)":"1038000"},{"span.name":"Web request","min(duration)":"2058000","max(duration)":"4447522000","avg(duration)":"29506434","percentile(duration, 90)":"40991000"},{"span.name":"app","min(duration)":"7053000","max(duration)":"436685000","avg(duration)":"13633160","percentile(duration, 90)":"21305000"},{"span.name":"application.ApplicationService/GetApplicationSyncWindows","min(duration)":"7635487","max(duration)":"7635487","avg(duration)":"7635487","percentile(duration, 90)":"7635487"},{"span.name":"application.ApplicationService/Watch","min(duration)":"446488835","max(duration)":"446488835","avg(duration)":"446488835","percentile(duration, 90)":"446488835"},{"span.name":"application.ApplicationService/WatchResourceTree","min(duration)":"446950112","max(duration)":"446950112","avg(duration)":"446950112","percentile(duration, 90)":"446950112"},{"span.name":"demorequest","min(duration)":"1000000000","max(duration)":"1000000000","avg(duration)":"1000000000","percentile(duration, 90)":"1000000000"},{"span.name":"doFilter","min(duration)":"2988000","max(duration)":"54795000","avg(duration)":"5952923","percentile(duration, 90)":"11326000"},{"span.name":"get","min(duration)":"2700000","max(duration)":"54255000","avg(duration)":"5449788","percentile(duration, 90)":"10626000"},{"span.name":"serverHandler","min(duration)":"890000","max(duration)":"74969000","avg(duration)":"9853358","percentile(duration, 90)":"24978000"},{"span.name":"tracegen.sh","min(duration)":"4000000000","max(duration)":"4000000000","avg(duration)":"4000000000","percentile(duration, 90)":"4000000000"}],"metadata":{"grail":{"canonicalQuery":"fetch spans\n| filter span.kind == \"server\"\n| summarize by:{span.name}, {min(duration), max(duration), avg(duration), percentile(duration, 90)}","timezone":"Europe/Berlin","query":"fetch spans\n | filter span.kind == \"server\"\n | summarize min(duration), max(duration), avg(duration), percentile(duration,90), by:{span.name}","scannedRecords":1765764,"dqlVersion":"V1_0","scannedBytes":683982526,"analysisTimeframe":{"start":"2023-10-25T09:14:07.980Z","end":"2023-10-25T11:14:07.980Z"},"locale":"","executionTimeMilliseconds":681,"notifications":[{"severity":"INFO","messageFormat":"The parameters should be grouped with curly braces: {}.","syntaxPosition":{"start":{"column":14,"index":57,"line":3},"end":{"column":81,"index":124,"line":3}},"messageFormatSpecifierTypes":[],"arguments":[],"notificationType":"PARAMETERS_SHOULD_BE_GROUPED","message":"The parameters should be grouped with curly braces: {}."}],"queryId":"3860dab3-42cf-441c-ad69-f9d3672c286f","sampled":false}},"types":[{"mappings":{"span.name":{"type":"string"},"min(duration)":{"type":"duration"},"max(duration)":{"type":"duration"},"avg(duration)":{"type":"duration"},"percentile(duration, 90)":{"type":"duration"}},"indexRange":[0,10]}]},"notifications":[{"message":"The parameters should be grouped with curly braces: {}.","severity":"info"}],"dateTime":"2023-10-25T11:14:07.979Z","input":{"value":"fetch spans\n | filter span.kind == \"server\"\n | summarize min(duration), max(duration), avg(duration), percentile(duration,90), by:{span.name}","timeframe":{"from":"now-2h","to":"now"}}},"visualization":"table"},"height":295,"title":"2.3.3: Min, Max, Avg, 90th Percentile Duration across all server-side spans"},{"id":"6295652b-105c-4504-9c0d-33c546399727","type":"markdown","markdown":"## Step 3: Automate Analysis of Services based on Traces, Logs, Metrics ... \nLast step is to create some automation with the data we have available. There are many automation use cases such as:\n\n1. A Daily summary of new spans that were detected\n2. A Daily overview of top spans by performance, failure rate ...\n3. An automated validation of a new release and how it impacts your SLOs\n4. An automated ticket or notification when anomalies get detected\n\nIn the workshop feel free to experiment with all the data available leveraging DQL, Site Reliability Guardian (SRG) and Workflows. Feel free to implement some of the use cases listed above or come up with your own. Together we will implement one end-2-end use case of using this data to automate the health validation of a service"},{"id":"f189ca37-fe4f-458c-9c8a-f898ecf3fddd","type":"markdown","markdown":"### Hands-on 3.1: Automated Validation of a service with SRG\nThe goal now is to walk through a simple use case now that involves creating a workflow that \n1. Creating a workflow that can be triggered from an external event such as a CI/CD tool\n2. Workflow to trigger an SRG that validates the health based on traces, logs and metrics ...\n3. Result gets send back to us as a notification \n\n#### Step 1: Lets create the SRG\nWe start by creating a simple Site Reliability Guardian for our service that validates the response time of our requests. We can later expand that guardian and add more objectives.\n\nWhen creating the guardian we can choose from an existing template. In our case we go with our own definition.\nPlease add a new objective with the name `Response Time`. For that objective we now need a DQL query that returns a single value. In our case we can use the following query\n```\nfetch spans\n | filter contains(dt.entity.service.name,\"workshop-service\") and span.kind == \"server\"\n | summarize toLong(max(duration))/1000000\n```\n\nThat query will return the long value of the duration for all workshop-services. We can adjust this by specifying the exact name of your service so we just query your service.\nThe conversion toLong is necessary as by default max(duration) will return a string representation in seconds. By converting it with toLong we get microseconds which we can convert to milliseconds as shown above\n\nNow its time to give the guardian a unique name and then lets execute it manually to test it out!\n\n#### Step 2: Add the Guardian to a Workflow\n\nFrom the guardian we can directly create a new workflow using the Automation button on the top right.\nThis will create a new default workflow that will execute the guardian as a first action. The workflow also assumes it will be triggered through a bizevent and that this event will have some context data such as `timeframe.from` and `timeframe.to` which is passed to the guardian as the evaluation timeframe.\nTo make this simpler for now we are changing the trigger of the workflow to manual and also change the timeframe for the Guardian Action to a fixed timeframe such as `last 30 minutes`.\n\nWe can now run the workflow which will execute our guardian.\n\n#### Step 3: Send the guardian result to a notification system\n\nAs we don't have a shared messaging system (Slack, Teams, ServiceNow, ...) we can use a free available API Endpoint Service such as [https://webhook.site/]\nPlease open [https://webhook.site/] in a separate browser. It will automatically give you a unique URL that we can later use in the Workflow to send a Message to. This will act as our \"poor mans messaging system\" :-)\n\nYou can then create a HTTP Request task after the Guardian Action with the following parameters:\n```\nMethod: POST\nURL: https://webhook.site/xxxxxxxx-yyyyyy-aaaaaa-ccccccccc\n\nPayload:\nFollowing Guardian was executed: {{ result(\"run_validation\").guardian_name }}\nAccess the full results here: {{ result(\"run_validation\").validation_url }}\n\nHere an overview of the high-level stats:\nError: {{result(\"run_validation\").validation_summary.error}}\nFail: {{result(\"run_validation\").validation_summary.fail}}\nWarning: {{result(\"run_validation\").validation_summary.warning}}\nInfo: {{result(\"run_validation\").validation_summary.info}}\nPass: {{result(\"run_validation\").validation_summary.pass}}\n```\n\n#### Step 4: Trigger that Workflow through an event\n\nIdeally we want to trigger a workflow and the guardian through an event that is sent whenever a new version of a release is deployed or when a configuration change was made to a system. This ensures that any change to a running system gets automatically validated with a guardian and everyone responsible will get notified through their channels\n\nIn our workshop we will therefore send in such a change event to Dynatrace following the best practices for Workflows that trigger guardians. The following is the JSON object for a BizEvent that contains specific metadata that will be passed to the guardian by a workflow that gets triggered by this event. \n\n```\n{ \n  \"timeframe.from\": \"now-32m\",\n  \"timeframe.to\": \"now-2m\",   \n  execution_context: {\n      buildId: \"1234\",\n      version: 1.234,\n      id: 111122233\n  }, \n  \"tag.service\": \"MY-WORKSHOP-SERVICE\",\n  \"tag.application\": \"workshop-app\",\n  \"tag.stage\": \"production\",\n  \"event.id\": 342342523,\n  \"event.provider\": \"Jenkins\",\n  \"event.type\": \"DEPLOYMENT\"    \n}\n```\n\nTo learn more about how to send those Events to Dynatrace from tools such as Jenkins, GitLab and other external tools please check out our material on Dynatrace Community, Documentation and our YouTube playlist\n\nFor our workshop today we will send such an event from our notebook using the following Code Tile that sends such an event using the Dynatrace Ingest API. Before executing the following code please make sure to find a unique name for the field `tag.service` (replace `MY-WORKSHOP-SERVICE` with something like `yourname-workshop-service`) as otherwise we may trigger workflows from other workshop attendees!\n\nPlease execute the code once before we continue\n\n#### Step 5: Change the trigger event in the Workflow to our BizEvent\n\nNow we go back to our guardian and change the event trigger to a `bizevent` that triggers with the following condition!\n```\ntag.service==\"MY-WORKSHOP-SERVICE\" and \ntag.application==\"workshop-app\" and\ntag.stage==\"production\"\n``` \n\nAs we are passing in timeframe.from and timeframe.to as a parameter we can also change the SRG Execution Details to use those two fields from the event body. Please change the two fields to use those two values:\n\n```\nExpression for From field:\n{{event()[\"timeframe.from\"]}}\n\nExpression for To field:\n{{event()[\"timeframe.to\"]}}\n```\n\n#### Step 6: Send another event to trigger the workflow\nIf everything is setup correctly we can send another deployment event with the code tile below. This event should trigger our workflow which executes the guardian and then sends us a result in the webhook.site\n\nLETS GO!"},{"id":"db91e3cb-42ec-4617-a5d8-667ef3b42b5a","type":"function","title":"3.1.1: Will send a BizEvent that can trigger a Workflow with an SRG","showTitle":false,"state":{"input":{"value":"async function getCurrentUser() {\n  return fetch('/platform/metadata/v1/user').then(res=>res.json())\n}\n\nexport default async function () { \n  var userObject = await getCurrentUser()\n  \n  // derive vesion from date\n  const now = new Date();\n  let hour = now.getHours();\n  var start = new Date(now.getFullYear(), 0, 0);\n  var diff = now - start;\n  var oneDay = 1000 * 60 * 60 * 24;\n  var day = Math.floor(diff / oneDay);\n  var buildId = day + hour;\n  \n  // event that triggers validation\n  const event = { \n    \"timeframe.from\": \"now-32m\",\n    \"timeframe.to\": \"now-2m\",   \n    execution_context: {\n        buildId: buildId + \".\" + \"1\",\n        version: day + \".\" + hour + \".\" + \"1\",\n        id: crypto.randomUUID().toString(),\n        userName: userObject.userName\n    }, \n    \"tag.service\": \"MY-WORKSHOP-SERVICE\",\n\t\"tag.application\": \"workshop-app\",\n\t\"tag.stage\": \"production\",\n    \"event.id\": crypto.randomUUID().toString(),\n    \"event.provider\": \"Jenkins\",\n    \"event.type\": \"DEPLOYMENT\"    \n  };\n\n  console.log(\"Ingesting event: \", event);\n\n  const ingestResponse = await fetch('/platform/classic/environment-api/v2/bizevents/ingest', {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify(event),\n  }); \n\n  console.log(\"Event ingested\", ingestResponse.status, await ingestResponse.text());\n\n  return event[\"execution_context\"]\n}","timeframe":{"from":"now-2h","to":"now"}},"state":"success","davis":{"includeLogs":true,"isDavisVisualizationAvailable":true},"visualizationSettings":{"thresholds":[],"chartSettings":{"gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"absolute"},"categoryOverrides":{}},"singleValue":{"label":"","prefixIcon":"","autoscale":true,"alignment":"center"},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"firstVisibleRowIndex":0,"columnWidths":{}}},"result":{"code":200,"value":{"buildId":"310.1","version":"298.12.1","id":"c877bcd5-b73a-4279-b9f8-78e810971341","userName":"Andreas Grabner"},"notifications":[],"logs":"Ingesting event:  {\n  \"timeframe.from\": \"now-32m\",\n  \"timeframe.to\": \"now-2m\",\n  execution_context: {\n    buildId: \"310.1\",\n    version: \"298.12.1\",\n    id: \"c877bcd5-b73a-4279-b9f8-78e810971341\",\n    userName: \"Andreas Grabner\"\n  },\n  \"tag.service\": \"MY-WORKSHOP-SERVICE\",\n  \"tag.application\": \"workshop-app\",\n  \"tag.stage\": \"production\",\n  \"event.id\": \"e83700b9-3096-4abf-be6d-8602401daa9f\",\n  \"event.provider\": \"Jenkins\",\n  \"event.type\": \"DEPLOYMENT\"\n}\nEvent ingested 202 {}\n","dateTime":"2023-10-25T12:16:08.243Z","input":{"value":"async function getCurrentUser() {\n  return fetch('/platform/metadata/v1/user').then(res=>res.json())\n}\n\nexport default async function () { \n  var userObject = await getCurrentUser()\n  \n  // derive vesion from date\n  const now = new Date();\n  let hour = now.getHours();\n  var start = new Date(now.getFullYear(), 0, 0);\n  var diff = now - start;\n  var oneDay = 1000 * 60 * 60 * 24;\n  var day = Math.floor(diff / oneDay);\n  var buildId = day + hour;\n  \n  // event that triggers validation\n  const event = { \n    \"timeframe.from\": \"now-32m\",\n    \"timeframe.to\": \"now-2m\",   \n    execution_context: {\n        buildId: buildId + \".\" + \"1\",\n        version: day + \".\" + hour + \".\" + \"1\",\n        id: crypto.randomUUID().toString(),\n        userName: userObject.userName\n    }, \n    \"tag.service\": \"MY-WORKSHOP-SERVICE\",\n\t\"tag.application\": \"workshop-app\",\n\t\"tag.stage\": \"production\",\n    \"event.id\": crypto.randomUUID().toString(),\n    \"event.provider\": \"Jenkins\",\n    \"event.type\": \"DEPLOYMENT\"    \n  };\n\n  console.log(\"Ingesting event: \", event);\n\n  const ingestResponse = await fetch('/platform/classic/environment-api/v2/bizevents/ingest', {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify(event),\n  }); \n\n  console.log(\"Event ingested\", ingestResponse.status, await ingestResponse.text());\n\n  return event[\"execution_context\"]\n}","timeframe":{"from":"now-2h","to":"now"}}},"visualization":"recordView"},"foldings":[],"height":450}]}